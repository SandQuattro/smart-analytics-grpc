syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

package assistants;

option go_package = "smart-analytics/assistants/grpc";

// Запрос, включающий AssistantID
message AssistantRequest {
  string assistant_id = 1;
}

message AssistantFileRequest {
  string assistant_id = 1;
  string file_id = 2;
}

// Ответ с AssistantFiles
message ListAssistantFilesResponse {
  AssistantFiles assistant_files = 1;
}

// сообщение для данных о файле
message AssistantFileData {
  string id = 1;
  string object = 2;
  google.protobuf.Timestamp created_at = 3;
  string assistant_id = 4;
}

// сообщение для списка файлов ассистента
message AssistantFiles {
  string object = 1;
  repeated AssistantFileData data = 2;
  string first_id = 3;
  string last_id = 4;
  bool has_more = 5;
}

message ThreadRequest {
  string thread_id = 1;
}

// ответ DeleteAssistantFile
message DeletedObject {
  string id = 1;
  string object = 2;
  bool  deleted = 3;
}

// ответ AssistantObject
message AssistantObject {
  string id = 1;
  string object = 2;
  google.protobuf.Timestamp  createdAt = 3;
  google.protobuf.Struct  metadata = 4;
}

message CreateThreadRunRequest {
  string thread_id = 1;
  string instruction = 2;
  string assistant_id = 3;
}

message LastError {
  string code = 1;
  string message = 2;
}

message ThreadRunTools {
  string type = 1;
}

message ThreadRun {
  string id = 1;
  string object = 2;
  google.protobuf.Timestamp  createdAt = 3;
  google.protobuf.Struct  metadata = 4;
  string assistant_id = 5;
  string thread_id = 6;
  string status = 7;
  google.protobuf.Timestamp started_at = 8;
  google.protobuf.Timestamp expires_at = 9;
  google.protobuf.Timestamp cancelled_at = 10;
  google.protobuf.Timestamp failed_at = 11;
  google.protobuf.Timestamp completed_at = 12;
  LastError last_error = 13;
  string model = 14;
  string instructions = 15;
  repeated ThreadRunTools tools = 16;
  repeated string file_ids = 17;
}

// Сервис для работы с файлами
service AssistantService {
  rpc ListAssistantFiles(AssistantRequest) returns (ListAssistantFilesResponse);
  rpc DeleteAssistantFile(AssistantFileRequest) returns (DeletedObject);
  rpc LinkFileToAssistant(AssistantFileRequest) returns (AssistantFileData);
  rpc CreateThread(google.protobuf.Empty) returns (AssistantObject);
  rpc GetThread(ThreadRequest) returns (AssistantObject);
  rpc DeleteThread(ThreadRequest) returns (DeletedObject);
  rpc CreateThreadRun(CreateThreadRunRequest) returns (ThreadRun);
}
